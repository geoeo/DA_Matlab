A = 1;B = 1;C = 0;sigma = 4;N = 80;max_its = 20000;epsilon = 0.01;I = [1,0,0;     0,1,0;     0,0,1];[x_i,y_i,z_i,x_i_prime,y_i_prime,z_i_prime,XX,YY] = generate3Dplane (A,B,C,N,sigma);X = transpose([x_i(:),y_i(:),z_i(:),ones(N,1)]); % homonegeous coordinates t = transpose(normrnd(10,sigma,[1 3]));yaw = normrnd(pi/2,sigma); %around zpitch = normrnd(0,sigma); % around yroll = normrnd(pi/2,sigma); % around xR_z = [cos(yaw), -sin(yaw),0;       sin(yaw), cos(yaw),0;       0,0,1];       R_y = [cos(pitch), 0, sin(pitch);       0,1,0;       -sin(pitch),0,cos(pitch)];       R_x = [1,0,0;       0, cos(roll),-sin(roll);       0,sin(roll),cos(roll)];R = R_z*R_y*R_x;     SE_3 = cat(1,cat(2, R, t),[0,0,0,1]); Y = SE_3*X;%initw = [0,0,0];t_prime = [0,0,0].';R_prime = [1,0,0;           0,1,0;           0,0,1];           SE3_prime = cat(1,cat(2, R_prime, t_prime),[0,0,0,1]);      %Generators of SE3     G1 = [0,0,0,0;      0,0,-1,0;      0,1,0,0;      0,0,0,0];G2 = [0,0,1,0      0,0,0,0      -1,0,0,0      0,0,0,0];       G3 = [0,-1,0,0;      1,0,0,0;      0,0,0,0;      0,0,0,0];      G4 = [0,0,0,1;       0,0,0,0;       0,0,0,0;       0,0,0,0];       G5 = [0,0,0,0;       0,0,0,1;       0,0,0,0;       0,0,0,0];       G6 = [0,0,0,0;      0,0,0,0;      0,0,0,1;      0,0,0,0];              %optimizationfor it = 1: max_itsY_prime = SE3_prime*X; diff = Y-Y_prime;v = sum(diff.^2,1).'; % compute errorv_mean = mean(v);if(v_mean < epsilon)  disp(it);  break;end     %accumulatorsinv_J = 0;w_sub = [0;0;0;0;0;0];w = [0;0;0;0;0;0];% as stated in obersvation.pdf we can sum individual termsfor n = 1 : N% using generators of so3 to compute derivative with respect to parametersG_1_y = G1*Y_prime(:,n);G_1_y = G_1_y(:);G_2_y = G2*Y_prime(:,n);G_2_y = G_2_y(:);G_3_y = G3*Y_prime(:,n);G_3_y = G_3_y(:);G_4_y = G4*Y_prime(:,n);G_4_y = G_4_y(:);G_5_y = G5*Y_prime(:,n);G_5_y = G_5_y(:);G_6_y = G6*Y_prime(:,n);G_6_y = G_6_y(:);G = cat(2,G_1_y,cat(2,G_2_y,G_3_y));G_trans = cat(2,G_4_y,cat(2,G_5_y,G_6_y));G = cat(2,G,G_trans);J = (2*G.'*(diff(:,n)));J_t = transpose(J);% here we sum the individual terms for each observationinv_J = inv_J +  J_t*J;w_sub = w_sub + (J_t*v(n)).';end% compute deltasinv_J = inv(inv_J);w = inv_J * w_sub;w_x = [0, -w(3), w(2),       w(3), 0, -w(1),      -w(2), w(1), 0];% closed form solution for exponential maptheta = sqrt(w.'*w);theta_sqred = theta^2;A = sin(theta)/theta;B = (1- cos(theta))/(theta_sqred);%translation parameters are just read outdelta_trans = [w(4),w(5),w(6)].';t_prime = t_prime + delta_trans;R_est = I + A*w_x + B*w_x^2;R_prime = R_est*R_prime;     SE3_prime = cat(1,cat(2, R_prime, t_prime),[0,0,0,1]); endY_new = SE3_prime*X;figure;plot3(X(1,:),X(2,:),X(3,:), '*');hold onplot3(Y(1,:),Y(2,:),Y(3,:), 'o');hold onplot3(Y_new(1,:),Y_new(2,:),Y_new(3,:), 'x');xlabel('x');ylabel('y');zlabel('z');legend('original samples','ground truth','estimated');